sensors_event_t get_quaternal_data()
{ /* Create Rotation Matrix rm from Quaternion */
    sensors_event_t event;
    imu::Quaternion quat = bno.getQuat();
    double rm[3][3];

    rm[1][1] = quat.w() * quat.w() + quat.x() * quat.x() - quat.y() * quat.y() - quat.z() * quat.z();
    rm[1][2] = 2 * quat.x() * quat.y() - 2 * quat.w() * quat.z();
    rm[1][3] = 2 * quat.x() * quat.z() + 2 * quat.w() * quat.y();
    rm[2][1] = 2 * quat.x() * quat.y() + 2 * quat.w() * quat.z();
    rm[2][2] = quat.w() * quat.w() - quat.x() * quat.x() + quat.y() * quat.y() - quat.z() * quat.z();
    rm[2][3] = 2 * quat.y() * quat.z() - 2 * quat.w() * quat.x();
    rm[3][1] = 2 * quat.x() * quat.z() - 2 * quat.w() * quat.y();
    rm[3][2] = 2 * quat.y() * quat.z() + 2 * quat.w() * quat.x();
    rm[3][3] = quat.w() * quat.w() - quat.x() * quat.x() - quat.y() * quat.y() + quat.z() * quat.z();

    /* Display Rotation Matrix */
    // Serial.print(rm[1][1], 5);
    // Serial.print("  \t");
    // Serial.print(rm[1][2], 5);
    // Serial.print("  \t");
    // Serial.println(rm[1][3], 5);
    // Serial.print(rm[2][1], 5);
    // Serial.print("  \t");
    // Serial.print(rm[2][2], 5);
    // Serial.print("  \t");
    // Serial.println(rm[2][3], 5);
    // Serial.print(rm[3][1], 5);
    // Serial.print("  \t");
    // Serial.print(rm[3][2], 5);
    // Serial.print("  \t");
    // Serial.println(rm[3][3], 5);

    /* Create Roll Pitch Yaw Angles from Quaternions */
    double yy = quat.y() * quat.y(); // 2 Uses below

    double roll = atan2(2 * (quat.w() * quat.x() + quat.y() * quat.z()), 1 - 2 * (quat.x() * quat.x() + yy));
    double pitch = asin(2 * quat.w() * quat.y() - quat.x() * quat.z());
    double yaw = atan2(2 * (quat.w() * quat.z() + quat.x() * quat.y()), 1 - 2 * (yy + quat.z() * quat.z()));

    /*  Convert Radians to Degrees */
    float rollDeg = 57.2958 * roll;
    float pitchDeg = 57.2958 * pitch;
    float yawDeg = 57.2958 * yaw;
    event.orientation.roll = rollDeg;
    event.orientation.pitch = pitchDeg;
    event.orientation.heading = yawDeg;

    /*  Display Roll, Pitch, and Yaw in Radians and Degrees*/
    // Serial.print("Roll:");
    // Serial.print(roll, 5);
    // Serial.print(" Radians \t");
    // Serial.print(rollDeg, 2);
    // Serial.println(" Degrees");
    // Serial.print("Pitch:");
    // Serial.print(pitch, 5);
    // Serial.print(" Radians \t");
    // Serial.print(pitchDeg, 2);
    // Serial.println(" Degrees");
    // Serial.print("Yaw:");
    // Serial.print(yaw, 5);
    // Serial.print(" Radians \t");
    // Serial.print(yawDeg, 2);
    // Serial.println(" Degrees");

    Serial.print("X: ");
    Serial.print(event.orientation.x, 4);
    Serial.print("\tY: ");
    Serial.print(event.orientation.y, 4);
    Serial.print("\tZ: ");
    Serial.print(event.orientation.z, 4);
    delay(BNO055_SAMPLERATE_DELAY_MS);
    return event;
}